package dcappattest_test

import (
	"bytes"
	"crypto/sha256"
	"encoding/base64"
	"testing"

	"github.com/gematik/zero-lab/pkg/attestation/dcappattest"
)

const attestationTestData = "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"

func TestAttestation(t *testing.T) {
	cborData, err := base64.StdEncoding.DecodeString(attestationTestData)
	if err != nil {
		t.Fatal(err)
	}

	clientDataHash := sha256.Sum256([]byte("challenge"))
	attestation, err := dcappattest.ParseAttestation(cborData, clientDataHash)
	if err != nil {
		t.Fatal(err)
	}

	t.Logf("Attestation: %+v", attestation.AuthenticatorData)
	appId := "A9FL89PFFL.de.gematik.zero-ios"

	appIdHash := sha256.Sum256([]byte(appId))

	if !bytes.Equal(attestation.AuthenticatorData.RpidHash, appIdHash[:]) {
		t.Fatalf("appIdHash mismatch: %x != %x", attestation.AuthenticatorData.RpidHash, appIdHash)
	}

	t.Log(attestation.AttestationStatement.CACerts[0].Issuer)
	t.Log(attestation.AttestationStatement.CACerts[0].Subject)
}
